---
# OneDev Build Specification v8
version: 8

# Define the jobs to be executed in the pipeline
jobs:
  # Job for building and testing the Java backend service
  - name: "Sundowner Service"
    # The jobExecutor block defines how the job runs. The image is a property of the executor.
    jobExecutor:
      name: "docker"
      image: "eclipse-temurin:21-jdk"
    # Define services needed for this job
    services:
      - name: "postgres"
        image: "postgis/postgis:17-master"
        environments:
          - name: "PGUSER"
            value: "postgres"
          - name: "PGPASSWORD"
            value: "postgres"
          - name: "POSTGRES_USER"
            value: "postgres"
          - name: "POSTGRES_PASSWORD"
            value: "postgres"
        readinessCheck:
          command: "pg_isready -U postgres"

    # The setupScript runs before any steps, preparing the environment and database.
    setupScript: |
      #!/bin/bash
      set -ex # Exit on error and print commands

      echo "--> Installing PostgreSQL client..."
      apt-get update && apt-get install -y postgresql-client

      echo "--> Waiting for database service to be ready..."
      # The service is available on localhost from the job's perspective
      until pg_isready -h localhost -U postgres; do
        echo "Postgres is unavailable - sleeping"
        sleep 1
      done
      echo "--> Database is ready."

      echo "--> Replacing placeholders in SQL files..."
      find sundowner-service/data/src/main/resources/db -type f -name "*.sql" -exec sed -i 's|@DBTAGLOWERCASE|test|g' {} +
      find sundowner-service/data/src/main/resources/db -type f -name "*.sql" -exec sed -i 's|@DBTAGUPPERCASE|TEST|g' {} +
      
      export PGPASSWORD=postgres
      echo "--> Creating user..."
      psql -v ON_ERROR_STOP=1 --username="postgres" --host="localhost" -f sundowner-service/data/src/main/resources/db/create_user.sql
      
      echo "--> Creating database..."
      psql -v ON_ERROR_STOP=1 --username="postgres" --host="localhost" -f sundowner-service/data/src/main/resources/db/create_database.sql
      
      echo "--> Creating extensions..."
      psql -v ON_ERROR_STOP=1 --username="postgres" --host="localhost" --dbname="sundowner_test_db" -f sundowner-service/data/src/main/resources/db/create_extensions.sql
      
      export PGPASSWORD=SUNDOWNER_TEST
      echo "--> Creating tables..."
      psql -v ON_ERROR_STOP=1 --username="sundowner_test" --host="localhost" --dbname="sundowner_test_db" -f sundowner-service/data/src/main/resources/db/create_tables.sql

    # Steps to execute for this job
    steps:
      - name: "Checkout Code"
        uses: "checkout"

      - name: "Build and Test with JaCoCo"
        uses: "command"
        commands: |
          cd sundowner-service
          ./gradlew build --scan
        publishReports:
          - type: "COVERAGE_JACOCO"
            filePatterns: "sundowner-service/build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
          - type: "TEST_JUNIT"
            filePatterns: "sundowner-service/build/test-results/test/*.xml"

  # Job for building and testing the Angular frontend
  - name: "Sundowner Webapp"
    jobExecutor:
      name: "docker"
      image: "node:22"
    steps:
      - name: "Checkout Code"
        uses: "checkout"

      - name: "Install Dependencies, Build, Lint, and Test"
        uses: "command"
        commands: |
          cd sundowner-webapp
          npm install
          npm run build -- --configuration=test
          npm run lint
          npm run test -- --coverage --watch=false --browsers=ChromeHeadless
        publishReports:
          - type: "COVERAGE_COBERTURA"
            filePatterns: "sundowner-webapp/coverage/cobertura-coverage.xml"
          - type: "TEST_JUNIT"
            filePatterns: "sundowner-webapp/coverage/junit.xml"

# Define triggers that will run this pipeline
triggers:
  # Trigger for pushes to specific branches
  - type: "BRANCH_PUSH"
    branches: 
      - "master"
      - "feature/**"
      - "bugfix/**"
      - "release/**"
  # Trigger for pull requests targeting specific branches
  - type: "PULL_REQUEST"
    branches:
      - "master"
      - "release/**"
